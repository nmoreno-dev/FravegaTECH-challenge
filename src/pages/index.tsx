import Head from "next/head";
import styles from "@/styles/Home.module.css";
import {
  useListGithubUsers,
  useSearchGithubUsers,
} from "../querys/useGitHubUsers.query";
import UserCard from "../components/UserCard";
import Searcher from "../components/Search";
import { useEffect, useState } from "react";

export default function Home() {
  const [searchQuery, setSearchQuery] = useState<string>("");

  // Hook para listar todos los usuarios si no hay búsqueda activa
  const {
    data: usersData,
    isLoading: isLoadingList,
    isError: isErrorList,
  } = useListGithubUsers({
    enabled: !searchQuery, // Solo se habilita si no hay búsqueda activa
  });

  // Hook para buscar usuarios filtrados
  const {
    data: filteredUsers,
    isLoading: isLoadingFilters,
    isError: isErrorFilters,
    refetch: refetchFilters,
  } = useSearchGithubUsers(searchQuery);

  // Efecto para refetchear cuando cambia la searchQuery
  useEffect(() => {
    if (searchQuery) {
      refetchFilters();
    }
  }, [searchQuery, refetchFilters]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <div>
          {/* Componente de búsqueda */}
          <Searcher
            onSearch={(query) => setSearchQuery(query)}
            onClear={() => setSearchQuery("")}
            className={styles.searchContainer}
          />
        </div>

        {(isLoadingList || isLoadingFilters) && <h1>Cargando datos...</h1>}

        {/* Mostrar error si lo hay */}
        {(isErrorList || isErrorFilters) && (
          <h1>Error al obtener los usuarios</h1>
        )}

        {/* Mostrar la lista de usuarios, completa o filtrada */}
        {!isLoadingList &&
          !isLoadingFilters &&
          !isErrorList &&
          !isErrorFilters && (
            <main className={styles.main}>
              {(searchQuery ? filteredUsers : usersData)?.map((user) => (
                <UserCard key={user.id} user={user} />
              ))}
            </main>
          )}
      </div>
    </>
  );
}
